package com.example.baobab_academy.services;

import com.example.baobab_academy.models.*;
import com.example.baobab_academy.repositories.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.ArrayList;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class UserProgressService {

    private final UserProgressRepository userProgressRepository;
    private final CourseRepository courseRepository;
    private final ChapterRepository chapterRepository;
    private final LessonRepository lessonRepository;
    private final UserRepository userRepository;

    /**
     * D√©marre la progression d'un utilisateur pour un cours
     */
    public void startCourseProgress(String userId, String courseId) {
        log.info("üéØ D√©marrage de la progression pour l'utilisateur {} sur le cours {}", userId, courseId);

        // V√©rifier que le cours existe et est publi√©
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new RuntimeException("Cours non trouv√©"));

        if (course.getStatus() != com.example.baobab_academy.models.enums.CourseStatus.PUBLISHED) {
            throw new RuntimeException("Ce cours n'est pas encore publi√©");
        }

        // V√©rifier que l'utilisateur existe
        userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Utilisateur non trouv√©"));

        // V√©rifier si l'utilisateur n'est pas d√©j√† inscrit
        if (userProgressRepository.existsByUserIdAndCourseId(userId, courseId)) {
            log.warn("‚ö†Ô∏è L'utilisateur {} est d√©j√† inscrit au cours {}", userId, courseId);
            return; // Ne pas cr√©er de doublon
        }

        // Cr√©er des entr√©es de progression pour TOUTES les le√ßons
        List<Chapter> chapters = chapterRepository.findByCourseIdOrderByOrderIndex(courseId);
        if (chapters.isEmpty()) {
            throw new RuntimeException("Ce cours n'a pas encore de contenu disponible");
        }

        List<UserProgress> progressEntries = new ArrayList<>();

        for (Chapter chapter : chapters) {
            List<Lesson> lessons = lessonRepository.findByChapterIdOrderByOrderIndex(chapter.getId());
            for (Lesson lesson : lessons) {
                UserProgress progress = UserProgress.builder()
                        .userId(userId)
                        .courseId(courseId)
                        .lessonId(lesson.getId())
                        .progressPercentage(0)
                        .watchTimeSeconds(0)
                        .completed(false)
                        .build();
                progressEntries.add(progress);
            }
        }

        if (progressEntries.isEmpty()) {
            throw new RuntimeException("Ce cours n'a pas encore de le√ßons disponibles");
        }

        userProgressRepository.saveAll(progressEntries);

        // üÜï NOUVEAUT√â : Incr√©menter le compteur d'√©tudiants du cours
        course.setStudents(course.getStudents() + 1);
        courseRepository.save(course);

        log.info("‚úÖ Progression initiale cr√©√©e pour le cours {} - {} le√ßons initialis√©es",
                courseId, progressEntries.size());
        log.info("üìä Nombre d'√©tudiants mis √† jour: {}", course.getStudents());
    }

    /**
     * Met √† jour la progression d'une le√ßon
     */
    public UserProgress updateLessonProgress(String userId, String lessonId, int progressPercentage,
            int watchTimeSeconds) {
        log.info("üìà Mise √† jour progression le√ßon {} pour utilisateur {}: {}%", lessonId, userId, progressPercentage);

        // R√©cup√©rer la le√ßon pour obtenir le courseId
        Lesson lesson = lessonRepository.findById(lessonId)
                .orElseThrow(() -> new RuntimeException("Le√ßon non trouv√©e"));

        Chapter chapter = chapterRepository.findById(lesson.getChapterId())
                .orElseThrow(() -> new RuntimeException("Chapitre non trouv√©"));

        // Trouver ou cr√©er la progression
        UserProgress progress = userProgressRepository.findByUserIdAndLessonId(userId, lessonId)
                .orElse(UserProgress.builder()
                        .userId(userId)
                        .courseId(chapter.getCourseId())
                        .lessonId(lessonId)
                        .build());

        progress.setProgressPercentage(Math.max(progress.getProgressPercentage(), progressPercentage));
        progress.setWatchTimeSeconds(Math.max(progress.getWatchTimeSeconds(), watchTimeSeconds));

        // Marquer comme compl√©t√© si 80% ou plus
        if (progressPercentage >= 80 && !progress.isCompleted()) {
            progress.markAsCompleted();
            log.info("üéâ Le√ßon {} automatiquement marqu√©e comme compl√©t√©e ({}%)", lessonId, progressPercentage);
        }

        return userProgressRepository.save(progress);
    }

    /**
     * Marque une le√ßon comme compl√©t√©e
     */
    public UserProgress markLessonAsCompleted(String userId, String lessonId) {
        log.info("‚úÖ Marquage le√ßon {} comme compl√©t√©e pour utilisateur {}", lessonId, userId);

        // R√©cup√©rer ou cr√©er la progression
        Lesson lesson = lessonRepository.findById(lessonId)
                .orElseThrow(() -> new RuntimeException("Le√ßon non trouv√©e"));

        Chapter chapter = chapterRepository.findById(lesson.getChapterId())
                .orElseThrow(() -> new RuntimeException("Chapitre non trouv√©"));

        UserProgress progress = userProgressRepository.findByUserIdAndLessonId(userId, lessonId)
                .orElse(UserProgress.builder()
                        .userId(userId)
                        .courseId(chapter.getCourseId())
                        .lessonId(lessonId)
                        .progressPercentage(0)
                        .watchTimeSeconds(0)
                        .completed(false)
                        .build());

        // Marquer comme compl√©t√© √† 100%
        progress.setProgressPercentage(100);
        progress.markAsCompleted();

        UserProgress savedProgress = userProgressRepository.save(progress);

        log.info("üéØ Le√ßon {} marqu√©e comme compl√©t√©e avec succ√®s", lessonId);
        return savedProgress;
    }

    /**
     * R√©cup√®re la progression d'un utilisateur pour un cours
     */
    public CourseProgressSummary getCourseProgress(String userId, String courseId) {
        log.info("üìä R√©cup√©ration progression cours {} pour utilisateur {}", courseId, userId);

        List<UserProgress> userProgresses = userProgressRepository.findByUserIdAndCourseId(userId, courseId);

        // Compter le total de le√ßons dans le cours
        List<Chapter> chapters = chapterRepository.findByCourseIdOrderByOrderIndex(courseId);
        long totalLessons = chapters.stream()
                .mapToLong(chapter -> lessonRepository.countByChapterId(chapter.getId()))
                .sum();

        long completedLessons = userProgresses.stream()
                .mapToLong(progress -> progress.isCompleted() ? 1 : 0)
                .sum();

        double progressPercentage = totalLessons > 0 ? (double) completedLessons / totalLessons * 100 : 0;

        log.info("üìà Progression calcul√©e: {}/{} le√ßons ({}%)", completedLessons, totalLessons,
                String.format("%.1f", progressPercentage));

        return CourseProgressSummary.builder()
                .courseId(courseId)
                .userId(userId)
                .totalLessons((int) totalLessons)
                .completedLessons((int) completedLessons)
                .progressPercentage(progressPercentage)
                .isStarted(!userProgresses.isEmpty())
                .isCompleted(totalLessons > 0 && completedLessons == totalLessons)
                .build();
    }

    /**
     * V√©rifie si un utilisateur est inscrit √† un cours
     */
    public boolean isUserEnrolledInCourse(String userId, String courseId) {
        boolean isEnrolled = userProgressRepository.existsByUserIdAndCourseId(userId, courseId);
        log.info("üîç V√©rification inscription utilisateur {} au cours {}: {}", userId, courseId, isEnrolled);
        return isEnrolled;
    }

    /**
     * üÜï R√©cup√®re la progression d√©taill√©e pour toutes les le√ßons d'un cours
     */
    public List<UserProgress> getDetailedCourseProgress(String userId, String courseId) {
        log.info("üìã R√©cup√©ration progression d√©taill√©e cours {} pour utilisateur {}", courseId, userId);

        List<UserProgress> progresses = userProgressRepository.findByUserIdAndCourseId(userId, courseId);

        // Si aucune progression trouv√©e mais que l'utilisateur est inscrit,
        // initialiser les progressions manquantes
        if (progresses.isEmpty() && isUserEnrolledInCourse(userId, courseId)) {
            log.info("üîÑ Aucune progression d√©taill√©e trouv√©e, initialisation...");
            initializeMissingProgress(userId, courseId);
            progresses = userProgressRepository.findByUserIdAndCourseId(userId, courseId);
        }

        log.info("üìä {} entr√©es de progression trouv√©es", progresses.size());
        return progresses;
    }

    /**
     * üÜï Initialise les progressions manquantes pour un cours
     */
    private void initializeMissingProgress(String userId, String courseId) {
        List<Chapter> chapters = chapterRepository.findByCourseIdOrderByOrderIndex(courseId);
        List<UserProgress> newProgresses = new ArrayList<>();

        for (Chapter chapter : chapters) {
            List<Lesson> lessons = lessonRepository.findByChapterIdOrderByOrderIndex(chapter.getId());
            for (Lesson lesson : lessons) {
                // V√©rifier si la progression existe d√©j√†
                if (!userProgressRepository.findByUserIdAndLessonId(userId, lesson.getId()).isPresent()) {
                    UserProgress progress = UserProgress.builder()
                            .userId(userId)
                            .courseId(courseId)
                            .lessonId(lesson.getId())
                            .progressPercentage(0)
                            .watchTimeSeconds(0)
                            .completed(false)
                            .build();
                    newProgresses.add(progress);
                }
            }
        }

        if (!newProgresses.isEmpty()) {
            userProgressRepository.saveAll(newProgresses);
            log.info("‚úÖ {} nouvelles progressions initialis√©es", newProgresses.size());
        }
    }

    /**
     * Classe pour r√©sumer la progression d'un cours
     */
    @lombok.Data
    @lombok.Builder
    public static class CourseProgressSummary {
        private String courseId;
        private String userId;
        private int totalLessons;
        private int completedLessons;
        private double progressPercentage;
        private boolean isStarted;
        private boolean isCompleted;
    }
}